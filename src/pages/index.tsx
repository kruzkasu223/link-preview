import type { NextPage } from "next"
import Head from "next/head"
import { useCallback, useState } from "react"
import { Loader } from "../components/loader"
import styles from "../styles/Home.module.css"
import { urlRegEx } from "../utils/constants"
import type { IPreviewData } from "../utils/types"

const APIURL: string = process.env.NEXT_PUBLIC_DEV
  ? "http://localhost:3000"
  : "https://lp.kruz.me"

const Home: NextPage = () => {
  const [url, setUrl] = useState<string>("")
  const [updatedUrl, setUpdatedUrl] = useState<string>("")
  const [urlError, setUrlError] = useState<string>("")
  const [previewData, setPreviewData] = useState<IPreviewData>()
  const [previewDataError, setPreviewDataError] = useState<unknown>()
  const [isLoading, setIsLoading] = useState(false)

  const isUrlValid = (url: string): void => {
    if (urlRegEx.test(url)) {
      setUrlError("")
      return
    }
    setUrlError("please enter valid url")
  }

  const urlChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {
    setPreviewData(undefined)
    setPreviewDataError(undefined)
    setUpdatedUrl("")
    if (e.target.value) {
      isUrlValid(e.target.value)
      setUrl(e.target.value)
    } else {
      setUrlError("")
      setUrl("")
    }
  }

  const onPreviewClick = useCallback(() => {
    let newUrl = url
    if (!(url.startsWith("https://") || url.startsWith("http://"))) {
      newUrl = "https://" + newUrl
    }
    setUpdatedUrl(newUrl)
    fetchData(newUrl)
  }, [url])

  const fetchData = async (url: string) => {
    setIsLoading(true)
    fetch(`${APIURL}/api?url=${url}`, {
      method: "GET",
    })
      .then(async (res) => {
        const response = await res?.json()
        if (!res.ok) throw response
        return response
      })
      .then((data) => {
        setPreviewData(data)
        setIsLoading(false)
      })
      .catch((err) => {
        setIsLoading(false)
        setPreviewDataError(err)
        console.error(err)
      })
  }

  return (
    <>
      {isLoading && <Loader />}
      <div className={styles.container}>
        <Head>
          <title>Link Preview</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <header className={styles.header}>
          <img src="/link.svg" alt="link" className={styles.linkIcon} />
          <h1 className={styles.title}>Welcome to Link Previewer!</h1>
        </header>
        <section className={styles.inputSection}>
          <div className={styles.inputMainWrapper}>
            <div className={styles.inputWrapper}>
              <input
                id="url"
                type="url"
                name="url"
                value={url}
                className={styles.input}
                onChange={urlChangeHandler}
                placeholder="Enter Valid URL"
                onKeyUp={(e) => {
                  if (
                    (e.code === "Enter" || e.code === "NumpadEnter") &&
                    !urlError &&
                    url
                  )
                    onPreviewClick()
                }}
              />
              <span className={styles.inputError}>{urlError}</span>
            </div>
            <button
              onClick={onPreviewClick}
              className={styles.button}
              disabled={!!urlError || !url}
            >
              See Preview
            </button>
          </div>
        </section>
        {previewData || previewDataError ? (
          <section className={styles.previewSection}>
            <div className={styles.previewCard}>
              {previewDataError ? (
                <div className={styles.previewCardError}>
                  <p>Oops!</p>
                  <p>something went wrong</p>
                  <p>please try again later</p>
                </div>
              ) : (
                <>
                  {previewData?.video ? (
                    <embed
                      className={styles.previewCardImg}
                      src={previewData?.video}
                    />
                  ) : (
                    <>
                      <img
                        className={styles.previewCardImg}
                        src={previewData?.image || "/placeholder.png"}
                        alt={previewData?.title || "Title"}
                      />
                    </>
                  )}
                  <div className={styles.previewCardDetails}>
                    <a
                      target="_blank"
                      href={updatedUrl}
                      rel="noopener noreferrer"
                      className={styles.previewCardLink}
                    >
                      {url}
                    </a>
                    <a
                      target="_blank"
                      href={updatedUrl}
                      rel="noopener noreferrer"
                      className={styles.previewCardTitle}
                    >
                      {previewData?.title || "Title"}
                    </a>
                    <p className={styles.previewCardDesc}>
                      {previewData?.description || "Description"}
                    </p>
                  </div>
                </>
              )}
            </div>
          </section>
        ) : (
          ""
        )}
      </div>
      <footer className={styles.footer}>
        <p className={styles.footerText}>
          Made by{" "}
          <a
            target="_blank"
            rel="noopener noreferrer"
            href="https://kruz.me"
            className={styles.footerLink}
          >
            {`Kru'Z`}
          </a>
        </p>
      </footer>
    </>
  )
}

export default Home
